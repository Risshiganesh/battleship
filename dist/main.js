(()=>{"use strict";var n={254:(n,e,t)=>{t.d(e,{A:()=>d});var r=t(354),o=t.n(r),i=t(314),a=t.n(i)()(o());a.push([n.id,"*{\n margin: 0;\n padding: 0;\n box-sizing: border-box;\n}\n\nhtml,\nbody{\n    height: 100%;\n    width: 100%;\n    background-color: black;\n}\n\n.main-container {\n\n    /* Have a minimum height and width for .player-div */\n\n    width: 100%;\n    height: 100%;\n    border: 2px solid red;\n    display: grid;\n    grid-template-rows: 100px 1fr 50px;\n}\n\n.header-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid blue;\n    color: white;\n    text-align: center;\n    font-size: 25px;\n\n    padding: 30px;\n}\n\n\n\n\n.player-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid pink;\n    /* background-color: yellow; */\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr))\n\n}\n\n.footer-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid green;\n}\n\n\n.player1-div,\n.player2-div{\n    padding: 20px;\n    gap: 15px;\n}\n\n\n.player1-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid lightgreen;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n    /* text-align: center; */\n    /* color: white; */\n}\n\n.player2-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid lightgoldenrodyellow;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n    /* text-align: center; */\n    /* color: white; */\n}\n\n\n.player1-grid,\n.player2-grid{\n\n    --height-and-width: max(350px, 30vw);\n    --border-size: 2px solid greenyellow;\n\n    border: var(--border-size);\n    width: var(--height-and-width);\n    height: var(--height-and-width);\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    color: white;\n\n}\n\n\n.player1-label,\n.player2-label{\n    color: white;\n    width: 100%;\n    border: 2px solid blanchedalmond;\n    text-align: center;\n    /* padding: 10px; */\n}\n\n\n.grid-column{\n    display: grid;\n    grid-template-rows: repeat(10, 1fr);\n    /* border: 2px solid turquoise; */\n}\n\n.grid-row{\n\n    border: 2px solid turquoise;\n    \n}\n.grid-row:hover{\n    /* background-color: rgba(255, 255, 0, 0.156); */\n    border: 3px solid yellow;\n}\n\n.clicked {\n    background-color: red;\n}\n\n.ship-located {\n    background-color: darkorchid;\n}\n\n\n.ship-is-hit{\n    background-color: darkred;\n}\n\n.attack-missed{\n    background-color: white;\n}\n@media (max-width: 770px){\n    /* change player font position */\n\n    .player1-grid,\n    .player2-grid{\n        /* border: 2px solid greenyellow; */\n        width: 350px;\n        height: 350px;\n\n    }\n    .player1-div{\n        order: 2;\n    }\n    .player2-div{\n        order: 1;\n    }\n\n    .player2-grid{\n        order: 2;\n    }\n\n    .player2-label{\n        order: 1;\n    }\n\n}","",{version:3,sources:["webpack://./src/assets/style.css"],names:[],mappings:"AAAA;CACC,SAAS;CACT,UAAU;CACV,sBAAsB;AACvB;;AAEA;;IAEI,YAAY;IACZ,WAAW;IACX,uBAAuB;AAC3B;;AAEA;;IAEI,oDAAoD;;IAEpD,WAAW;IACX,YAAY;IACZ,qBAAqB;IACrB,aAAa;IACb,kCAAkC;AACtC;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,YAAY;IACZ,kBAAkB;IAClB,eAAe;;IAEf,aAAa;AACjB;;;;;AAKA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,8BAA8B;IAC9B,aAAa;IACb;;AAEJ;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,uBAAuB;AAC3B;;;AAGA;;IAEI,aAAa;IACb,SAAS;AACb;;;AAGA;IACI,WAAW;IACX,YAAY;IACZ,4BAA4B;IAC5B,aAAa;IACb,qBAAqB;IACrB,mBAAmB;IACnB,wBAAwB;IACxB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sCAAsC;IACtC,aAAa;IACb,qBAAqB;IACrB,mBAAmB;IACnB,wBAAwB;IACxB,kBAAkB;AACtB;;;AAGA;;;IAGI,oCAAoC;IACpC,oCAAoC;;IAEpC,0BAA0B;IAC1B,8BAA8B;IAC9B,+BAA+B;IAC/B,aAAa;IACb,sCAAsC;IACtC,YAAY;;AAEhB;;;AAGA;;IAEI,YAAY;IACZ,WAAW;IACX,gCAAgC;IAChC,kBAAkB;IAClB,mBAAmB;AACvB;;;AAGA;IACI,aAAa;IACb,mCAAmC;IACnC,iCAAiC;AACrC;;AAEA;;IAEI,2BAA2B;;AAE/B;AACA;IACI,gDAAgD;IAChD,wBAAwB;AAC5B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,4BAA4B;AAChC;;;AAGA;IACI,yBAAyB;AAC7B;;AAEA;IACI,uBAAuB;AAC3B;AACA;IACI,gCAAgC;;IAEhC;;QAEI,mCAAmC;QACnC,YAAY;QACZ,aAAa;;IAEjB;IACA;QACI,QAAQ;IACZ;IACA;QACI,QAAQ;IACZ;;IAEA;QACI,QAAQ;IACZ;;IAEA;QACI,QAAQ;IACZ;;AAEJ",sourcesContent:["*{\n margin: 0;\n padding: 0;\n box-sizing: border-box;\n}\n\nhtml,\nbody{\n    height: 100%;\n    width: 100%;\n    background-color: black;\n}\n\n.main-container {\n\n    /* Have a minimum height and width for .player-div */\n\n    width: 100%;\n    height: 100%;\n    border: 2px solid red;\n    display: grid;\n    grid-template-rows: 100px 1fr 50px;\n}\n\n.header-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid blue;\n    color: white;\n    text-align: center;\n    font-size: 25px;\n\n    padding: 30px;\n}\n\n\n\n\n.player-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid pink;\n    /* background-color: yellow; */\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr))\n\n}\n\n.footer-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid green;\n}\n\n\n.player1-div,\n.player2-div{\n    padding: 20px;\n    gap: 15px;\n}\n\n\n.player1-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid lightgreen;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n    /* text-align: center; */\n    /* color: white; */\n}\n\n.player2-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid lightgoldenrodyellow;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n    /* text-align: center; */\n    /* color: white; */\n}\n\n\n.player1-grid,\n.player2-grid{\n\n    --height-and-width: max(350px, 30vw);\n    --border-size: 2px solid greenyellow;\n\n    border: var(--border-size);\n    width: var(--height-and-width);\n    height: var(--height-and-width);\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    color: white;\n\n}\n\n\n.player1-label,\n.player2-label{\n    color: white;\n    width: 100%;\n    border: 2px solid blanchedalmond;\n    text-align: center;\n    /* padding: 10px; */\n}\n\n\n.grid-column{\n    display: grid;\n    grid-template-rows: repeat(10, 1fr);\n    /* border: 2px solid turquoise; */\n}\n\n.grid-row{\n\n    border: 2px solid turquoise;\n    \n}\n.grid-row:hover{\n    /* background-color: rgba(255, 255, 0, 0.156); */\n    border: 3px solid yellow;\n}\n\n.clicked {\n    background-color: red;\n}\n\n.ship-located {\n    background-color: darkorchid;\n}\n\n\n.ship-is-hit{\n    background-color: darkred;\n}\n\n.attack-missed{\n    background-color: white;\n}\n@media (max-width: 770px){\n    /* change player font position */\n\n    .player1-grid,\n    .player2-grid{\n        /* border: 2px solid greenyellow; */\n        width: 350px;\n        height: 350px;\n\n    }\n    .player1-div{\n        order: 2;\n    }\n    .player2-div{\n        order: 1;\n    }\n\n    .player2-grid{\n        order: 2;\n    }\n\n    .player2-label{\n        order: 1;\n    }\n\n}"],sourceRoot:""}]);const d=a},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(r)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(a[s]=!0)}for(var l=0;l<n.length;l++){var c=[].concat(n[l]);r&&a[c[0]]||(void 0!==i&&(void 0===c[5]||(c[1]="@layer".concat(c[5].length>0?" ".concat(c[5]):""," {").concat(c[1],"}")),c[5]=i),t&&(c[2]?(c[1]="@media ".concat(c[2]," {").concat(c[1],"}"),c[2]=t):c[2]=t),o&&(c[4]?(c[1]="@supports (".concat(c[4],") {").concat(c[1],"}"),c[4]=o):c[4]="".concat(o)),e.push(c))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},a=[],d=0;d<n.length;d++){var s=n[d],l=r.base?s[0]+r.base:s[0],c=i[l]||0,A="".concat(l," ").concat(c);i[l]=c+1;var p=t(A),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var h=o(u,r);r.byIndex=d,e.splice(d,0,{identifier:A,updater:h,references:1})}a.push(A)}return a}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var i=r(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var d=t(i[a]);e[d].references--}for(var s=r(n,o),l=0;l<i.length;l++){var c=t(i[l]);0===e[c].references&&(e[c].updater(),e.splice(c,1))}i=s}}},659:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var i=t.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(72),e=t.n(n),r=t(825),o=t.n(r),i=t(659),a=t.n(i),d=t(56),s=t.n(d),l=t(540),c=t.n(l),A=t(113),p=t.n(A),u=t(254),h={};function g(n){document.querySelector(".header-div").textContent=n}function y(n,e,t){const r=function(){const n=r(),e=r(),t=[];function r(){const n=[];for(let e=0;e<10;e++){const t=[];t.length=10,n[e]=t}return n}return{ownGrid:n,placeShip:function(e,r,o){const i=function(n,e,t){let r=!0;const o=[];if(n.x<0||n.y<0||n.x>9||n.y>9)return r=!1,r;for(let i=0;i<t.getLength();i++){let t,a;"north"===e&&(t=n.x,a=n.y-i),"south"===e&&(t=n.x,a=n.y+i),"east"===e&&(t=n.x+i,a=n.y),"west"===e&&(t=n.x-i,a=n.y),(t<0||a<0||t>9||a>9)&&(r=!1),o.push([t,a])}return{validity:r,potentialCoordinates:o}}(e,r,o),a=i.potentialCoordinates;let d=i.validity,s="Placement_success";return d=function(n,e,t){if(!n)return n;for(let r=0;r<e.length;r++){const o=e[r];if(t[o[0]][o[1]]){n=!1;break}}return n}(d,a,n),d?(a.forEach((e=>{n[e[0]][e[1]]=o})),t.push(o),s):(s="Placement_failed",s)},receiveAttack:function(t,r){return"Miss"===e[t][r]?"Already Miss":n[t][r]?"Hit"===e[t][r]?"Already Hit":(n[t][r].hit(),e[t][r]="Hit","Hit"):(e[t][r]="Miss","Miss")},allSunk:function(){let n=!0;for(let e=0;e<t.length;e++)if(!t[e].isSunk()){n=!1;break}return n},hitMap:e}}();return"real"!==n&&"computer"!==n?"Invalid_input":{type:n,board:r}}function f(n){let e=0,t=!1;return{getLength:function(){return n},getHits:function(){return e},isSunk:function(){return e>=n&&(t=!0),t},hit:function(){e++}}}function C(n,e,t){for(let r=0;r<n.board.ownGrid.length;r++){n.board.ownGrid[r];const o=document.createElement("div");o.classList.add("grid-column"),e.append(o);for(let e=9;e>=0;e--){const i=document.createElement("div");i.classList.add("grid-row"),o.append(i),v(n,i,r,e,t)}}}function m(n,e,t){{const n=t.childNodes;for(let t=0;t<e.board.ownGrid.length;t++){const r=e.board.ownGrid[t];let o=0;const i=n[t].childNodes;for(let n=9;n>=0;n--)r[n]&&i[o].classList.add("ship-located"),o++}}}function b(n,e){{const t=e.childNodes;for(let e=0;e<n.board.hitMap.length;e++){const r=n.board.hitMap[e];let o=0;const i=t[e].childNodes;for(let n=9;n>=0;n--){const e=r[n];"Hit"===e&&i[o].classList.add("ship-is-hit"),"Miss"===e&&i[o].classList.add("attack-missed"),o++}}}}function v(n,e,t,r,o){e.addEventListener("click",(function(){const i=w.getTurn();if(w.isGameOver())return;if(g(`It is ${i}'s turn.`),o===i)return void g("Not your own board!");const a=t,d=r;if(console.log(a,d),console.log(n.board.hitMap[a][d]),"Miss"!==n.board.hitMap[a][d]&&"Hit"!==n.board.hitMap[a][d])return g(`${i} chose x: ${a} and y: ${d} and it's a ${n.board.receiveAttack(a,d).toLowerCase()}`),w.updateTurn(),n.board.ownGrid[a][d]?(e.classList.add("ship-is-hit"),void console.log(n.board.ownGrid[a][d].getHits())):void e.classList.add("attack-missed");g("Grid already chosen")}))}let I,x;h.styleTagTransform=p(),h.setAttributes=s(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=c(),e()(u.A,h),u.A&&u.A.locals&&u.A.locals;const w=function(){let n="player1";return{updateTurn:function(){return"player1"===n?(n="player2",I.deleteGrids(),I.displayGrids(),I.showHitMap(),x.deleteGrids(),x.displayGrids(),x.showShips(),x.showHitMap(),void("computer"===x.player2.type&&k(I.player1))):"player2"===n?(n="player1",x.deleteGrids(),x.displayGrids(),x.showHitMap(),I.deleteGrids(),I.displayGrids(),I.showShips(),I.showHitMap(),void("computer"===I.player1.type&&k(x.player2))):void 0},getTurn:function(){return n},isGameOver:function(){const n=I.player1.board.allSunk();console.log(n);const e=x.player2.board.allSunk();return console.log(e),n?(g("Player 2 wins!"),!0):e?(g("Player 1 wins!"),!0):void 0}}}();let B=0;function k(n){console.log("Computer attacks");const e=Math.floor(10*Math.random()),t=Math.floor(10*Math.random()),r=n.board.receiveAttack(e,t);if("Already Hit"===r||"Already Miss"==r)return k(n);g(`Computer chose x: ${e} and y: ${t} and it's a ${r.toLowerCase()}`),w.updateTurn(),B++,console.log("Computer attacks:"+B)}!function(){const n=document.querySelector("body"),e=document.createElement("div");e.classList.add("main-container"),n.append(e);const t=document.createElement("div");t.classList.add("header-div"),t.textContent="Player 1 goes first",e.append(t);const r=document.createElement("div");r.classList.add("player-div"),e.append(r);const o=document.createElement("div");o.classList.add("footer-div"),e.append(o);const i=document.createElement("div");i.classList.add("player1-div"),r.append(i);const a=document.createElement("div");a.classList.add("player1-grid"),i.append(a);const d=document.createElement("div");d.classList.add("player1-label"),d.textContent="Player 1",i.append(d);const s=document.createElement("div");s.classList.add("player2-div"),r.append(s);const l=document.createElement("div");l.classList.add("player2-grid"),s.append(l);const c=document.createElement("div");c.classList.add("player2-label"),c.textContent="Player 2",s.append(c)}(),function(){const n=y("real"),e=y("computer"),t=f(5),r=f(4),o=f(3),i=f(3),a=f(2),d=f(5),s=f(4),l=f(3),c=f(3),A=f(2);n.board.placeShip({x:9,y:9},"north",t),n.board.placeShip({x:0,y:0},"east",r),n.board.placeShip({x:5,y:5},"east",o),n.board.placeShip({x:2,y:2},"east",i),n.board.placeShip({x:9,y:0},"south",a);for(let e=0;e<10;e++)n.board.receiveAttack(9,e),n.board.receiveAttack(e,e);e.board.placeShip({x:8,y:8},"west",d),e.board.placeShip({x:0,y:0},"east",s),e.board.placeShip({x:5,y:5},"east",l),e.board.placeShip({x:2,y:2},"east",c),e.board.placeShip({x:9,y:5},"south",A);for(let n=0;n<10;n++)e.board.receiveAttack(n,n);I=function(n,e){const t=document.querySelector(".player1-grid");return{displayGrids:function(){C(n,t,"player1")},deleteGrids:function(){for(;t.firstChild;)t.firstChild.remove()},showShips:function(){m(0,n,t)},showHitMap:function(){b(n,t)},player1:n}}(n,n.type),x=function(n,e){const t=document.querySelector(".player2-grid");return{displayGrids:function(){C(n,t,"player2")},deleteGrids:function(){for(;t.firstChild;)t.firstChild.remove()},showShips:function(){m(0,n,t)},showHitMap:function(){b(n,t)},player2:n}}(e,e.type),I.displayGrids(),I.showShips(),x.displayGrids(),x.showHitMap()}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,