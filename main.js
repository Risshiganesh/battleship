(()=>{"use strict";var n={254:(n,e,t)=>{t.d(e,{A:()=>d});var i=t(354),r=t.n(i),o=t(314),a=t.n(o)()(r());a.push([n.id,"*{\n margin: 0;\n padding: 0;\n box-sizing: border-box;\n}\n\nhtml,\nbody{\n    height: 100%;\n    width: 100%;\n    background-color: black;\n    position: relative;\n    \n}\n\n.game-title {\n    font-size: 40px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-weight: 900;\n    color: white;\n}\n\n.start-menu {\n    \n    \n    \n    display: none\n\n\n}\n\n\n\n.show-start-menu {\n\n    display: grid;\n    grid-template-rows: 300px 80px 200px;position: fixed;\n    width: 100%;\n    height: 100%;\n    background-color: black;\n    z-index: 2;\n\n\n    \n}\n\n.player-title-div {\n    display: grid;\n    align-items: end;\n    justify-items: center;\n}\n\n.player-type-title{\n    color: white;\n    text-align: center;\n    font-size: 30px;\n    font-family: serif;\n    font-weight: 900;\n    /* vertical-align: middle; */\n}\n.player-type-div {\n    display: grid;\n\n    grid-template-columns: 1fr 1fr;\n    justify-items: center;\n    align-items: end;\n    gap: 30px;\n}\n\n.player-type-div > button {\n    width: 130px;\n    height: 40px;\n}\n\n.computer-option {\n    justify-self: end;\n}\n\n.real-player-option {\n    justify-self: start;\n}\n\n.start-button-div {\n    display: grid;\n    justify-items: center;\n    align-items: center;\n}\n\n.start-button {\n    width: 150px;\n    height: 50px;\n}\n\n\n.pass-device{\n    border: 3px solid pink;\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    background-color: gray;\n    \n    padding: 20%;\n    z-index: 2;\n    \n    display: none;\n}\n\n.show-pass-device{\n    display: grid;\n    justify-items: center;\n    align-items: center;\n    /* grid-template-rows: 170px 200px; */\n    gap: 20px;\n}\n\n\n.pass-device-message {\n    border: 3px solid red;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n\n\n    text-align: center;\n    vertical-align: middle;\n    padding: 50px;\n    font-size: 40px;\n    /* line-height: 100%; */\n}\n\n.pass-device-button {\n    border: 3px solid blue;\n    width: 200px;\n    height: 70px;\n    font-size: 25px;\n    border-radius: 15px;\n    align-self: start;\n}\n\n.main-container {\n\n    /* Have a minimum height and width for .player-div */\n\n    width: 100%;\n    height: 100%;\n    border: 2px solid red;\n    display: grid;\n    grid-template-rows: 100px 1fr 50px;\n}\n\n.top-div {\n    display: grid;\n    grid-template-rows: 1fr 1fr;\n    justify-items: center;\n    align-items: center;\n}\n\n.header-div {\n    width: 100%;\n\n    border: 2px solid blue;\n    color: white;\n    text-align: center;\n    font-size: 20px;\n\n    /* padding: 30px; */\n}\n\n.restart-button {\n    width: 90px;\n    height: 30px;\n}\n\n\n\n\n.player-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid pink;\n    /* background-color: yellow; */\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));\n    position: relative;;\n\n}\n\n.game-over{\n    position: fixed;\n    display: none;\n}\n\n.enable-game-over{\n    width: 100%;\n    height: 100%;\n    display: block;\n}\n/* Do I need z-index here? - Check if the link is still clickable if z-index is 0 after game is over */\n.footer-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid green;\n    z-index: 1; \n    color: white;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n}\n\n.footer-link:hover{\n    color: white;\n}\n\n.player1-div,\n.player2-div{\n    padding: 20px;\n    gap: 15px;\n}\n\n\n.player1-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid lightgreen;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n    /* text-align: center; */\n    /* color: white; */\n}\n\n.player2-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid lightgoldenrodyellow;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n    /* text-align: center; */\n    /* color: white; */\n}\n\n\n.player1-grid,\n.player2-grid{\n\n    --height-and-width: max(330px, 30vw);\n    --border-size: 2px solid greenyellow;\n\n    border: var(--border-size);\n    width: var(--height-and-width);\n    height: var(--height-and-width);\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    color: white;\n\n}\n\n\n.player1-label,\n.player2-label{\n    color: white;\n    width: 100%;\n    border: 2px solid blanchedalmond;\n    text-align: center;\n    /* padding: 10px; */\n}\n\n\n.grid-column{\n    display: grid;\n    grid-template-rows: repeat(10, 1fr);\n    /* border: 2px solid turquoise; */\n    text-align: center;\n}\n\n.grid-row{\n\n    border: 2px solid turquoise;\n    \n}\n.grid-row:hover{\n    /* background-color: rgba(255, 255, 0, 0.156); */\n    border: 3px solid yellow;\n}\n\n.clicked {\n    background-color: red;\n}\n\n.ship-located {\n    background-color: darkorchid;\n}\n\n\n.ship-is-hit{\n    background-color: darkred;\n}\n\n.attack-missed{\n    background-color: white;\n}\n@media (max-width: 770px){\n    /* change player font position */\n\n    .player1-grid,\n    .player2-grid{\n        \n        /* Might have to reduce size further */\n        width: 280px;\n        height: 280px;\n\n    }\n    .player1-div{\n        order: 2;\n    }\n    .player2-div{\n        order: 1;\n    }\n\n    .player2-grid{\n        order: 2;\n    }\n\n    .player2-label{\n        order: 1;\n    }\n\n}","",{version:3,sources:["webpack://./src/assets/style.css"],names:[],mappings:"AAAA;CACC,SAAS;CACT,UAAU;CACV,sBAAsB;AACvB;;AAEA;;IAEI,YAAY;IACZ,WAAW;IACX,uBAAuB;IACvB,kBAAkB;;AAEtB;;AAEA;IACI,eAAe;IACf,yCAAyC;IACzC,gBAAgB;IAChB,YAAY;AAChB;;AAEA;;;;IAII;;;AAGJ;;;;AAIA;;IAEI,aAAa;IACb,oCAAoC,CAAC,eAAe;IACpD,WAAW;IACX,YAAY;IACZ,uBAAuB;IACvB,UAAU;;;;AAId;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,qBAAqB;AACzB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,eAAe;IACf,kBAAkB;IAClB,gBAAgB;IAChB,4BAA4B;AAChC;AACA;IACI,aAAa;;IAEb,8BAA8B;IAC9B,qBAAqB;IACrB,gBAAgB;IAChB,SAAS;AACb;;AAEA;IACI,YAAY;IACZ,YAAY;AAChB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,mBAAmB;AACvB;;AAEA;IACI,YAAY;IACZ,YAAY;AAChB;;;AAGA;IACI,sBAAsB;IACtB,eAAe;IACf,WAAW;IACX,YAAY;IACZ,sBAAsB;;IAEtB,YAAY;IACZ,UAAU;;IAEV,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,qBAAqB;IACrB,mBAAmB;IACnB,qCAAqC;IACrC,SAAS;AACb;;;AAGA;IACI,qBAAqB;IACrB,WAAW;IACX,YAAY;IACZ,aAAa;IACb,qBAAqB;IACrB,mBAAmB;;;IAGnB,kBAAkB;IAClB,sBAAsB;IACtB,aAAa;IACb,eAAe;IACf,uBAAuB;AAC3B;;AAEA;IACI,sBAAsB;IACtB,YAAY;IACZ,YAAY;IACZ,eAAe;IACf,mBAAmB;IACnB,iBAAiB;AACrB;;AAEA;;IAEI,oDAAoD;;IAEpD,WAAW;IACX,YAAY;IACZ,qBAAqB;IACrB,aAAa;IACb,kCAAkC;AACtC;;AAEA;IACI,aAAa;IACb,2BAA2B;IAC3B,qBAAqB;IACrB,mBAAmB;AACvB;;AAEA;IACI,WAAW;;IAEX,sBAAsB;IACtB,YAAY;IACZ,kBAAkB;IAClB,eAAe;;IAEf,mBAAmB;AACvB;;AAEA;IACI,WAAW;IACX,YAAY;AAChB;;;;;AAKA;IACI,WAAW;IACX,YAAY;IACZ,sBAAsB;IACtB,8BAA8B;IAC9B,aAAa;IACb,2DAA2D;IAC3D,kBAAkB;;AAEtB;;AAEA;IACI,eAAe;IACf,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,cAAc;AAClB;AACA,sGAAsG;AACtG;IACI,WAAW;IACX,YAAY;IACZ,uBAAuB;IACvB,UAAU;IACV,YAAY;IACZ,aAAa;IACb,qBAAqB;IACrB,mBAAmB;AACvB;;AAEA;IACI,YAAY;AAChB;;AAEA;;IAEI,aAAa;IACb,SAAS;AACb;;;AAGA;IACI,WAAW;IACX,YAAY;IACZ,4BAA4B;IAC5B,aAAa;IACb,qBAAqB;IACrB,mBAAmB;IACnB,wBAAwB;IACxB,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,sCAAsC;IACtC,aAAa;IACb,qBAAqB;IACrB,mBAAmB;IACnB,wBAAwB;IACxB,kBAAkB;AACtB;;;AAGA;;;IAGI,oCAAoC;IACpC,oCAAoC;;IAEpC,0BAA0B;IAC1B,8BAA8B;IAC9B,+BAA+B;IAC/B,aAAa;IACb,sCAAsC;IACtC,YAAY;;AAEhB;;;AAGA;;IAEI,YAAY;IACZ,WAAW;IACX,gCAAgC;IAChC,kBAAkB;IAClB,mBAAmB;AACvB;;;AAGA;IACI,aAAa;IACb,mCAAmC;IACnC,iCAAiC;IACjC,kBAAkB;AACtB;;AAEA;;IAEI,2BAA2B;;AAE/B;AACA;IACI,gDAAgD;IAChD,wBAAwB;AAC5B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,4BAA4B;AAChC;;;AAGA;IACI,yBAAyB;AAC7B;;AAEA;IACI,uBAAuB;AAC3B;AACA;IACI,gCAAgC;;IAEhC;;;QAGI,sCAAsC;QACtC,YAAY;QACZ,aAAa;;IAEjB;IACA;QACI,QAAQ;IACZ;IACA;QACI,QAAQ;IACZ;;IAEA;QACI,QAAQ;IACZ;;IAEA;QACI,QAAQ;IACZ;;AAEJ",sourcesContent:["*{\n margin: 0;\n padding: 0;\n box-sizing: border-box;\n}\n\nhtml,\nbody{\n    height: 100%;\n    width: 100%;\n    background-color: black;\n    position: relative;\n    \n}\n\n.game-title {\n    font-size: 40px;\n    font-family: Arial, Helvetica, sans-serif;\n    font-weight: 900;\n    color: white;\n}\n\n.start-menu {\n    \n    \n    \n    display: none\n\n\n}\n\n\n\n.show-start-menu {\n\n    display: grid;\n    grid-template-rows: 300px 80px 200px;position: fixed;\n    width: 100%;\n    height: 100%;\n    background-color: black;\n    z-index: 2;\n\n\n    \n}\n\n.player-title-div {\n    display: grid;\n    align-items: end;\n    justify-items: center;\n}\n\n.player-type-title{\n    color: white;\n    text-align: center;\n    font-size: 30px;\n    font-family: serif;\n    font-weight: 900;\n    /* vertical-align: middle; */\n}\n.player-type-div {\n    display: grid;\n\n    grid-template-columns: 1fr 1fr;\n    justify-items: center;\n    align-items: end;\n    gap: 30px;\n}\n\n.player-type-div > button {\n    width: 130px;\n    height: 40px;\n}\n\n.computer-option {\n    justify-self: end;\n}\n\n.real-player-option {\n    justify-self: start;\n}\n\n.start-button-div {\n    display: grid;\n    justify-items: center;\n    align-items: center;\n}\n\n.start-button {\n    width: 150px;\n    height: 50px;\n}\n\n\n.pass-device{\n    border: 3px solid pink;\n    position: fixed;\n    width: 100%;\n    height: 100%;\n    background-color: gray;\n    \n    padding: 20%;\n    z-index: 2;\n    \n    display: none;\n}\n\n.show-pass-device{\n    display: grid;\n    justify-items: center;\n    align-items: center;\n    /* grid-template-rows: 170px 200px; */\n    gap: 20px;\n}\n\n\n.pass-device-message {\n    border: 3px solid red;\n    width: 100%;\n    height: 100%;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n\n\n    text-align: center;\n    vertical-align: middle;\n    padding: 50px;\n    font-size: 40px;\n    /* line-height: 100%; */\n}\n\n.pass-device-button {\n    border: 3px solid blue;\n    width: 200px;\n    height: 70px;\n    font-size: 25px;\n    border-radius: 15px;\n    align-self: start;\n}\n\n.main-container {\n\n    /* Have a minimum height and width for .player-div */\n\n    width: 100%;\n    height: 100%;\n    border: 2px solid red;\n    display: grid;\n    grid-template-rows: 100px 1fr 50px;\n}\n\n.top-div {\n    display: grid;\n    grid-template-rows: 1fr 1fr;\n    justify-items: center;\n    align-items: center;\n}\n\n.header-div {\n    width: 100%;\n\n    border: 2px solid blue;\n    color: white;\n    text-align: center;\n    font-size: 20px;\n\n    /* padding: 30px; */\n}\n\n.restart-button {\n    width: 90px;\n    height: 30px;\n}\n\n\n\n\n.player-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid pink;\n    /* background-color: yellow; */\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(380px, 1fr));\n    position: relative;;\n\n}\n\n.game-over{\n    position: fixed;\n    display: none;\n}\n\n.enable-game-over{\n    width: 100%;\n    height: 100%;\n    display: block;\n}\n/* Do I need z-index here? - Check if the link is still clickable if z-index is 0 after game is over */\n.footer-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid green;\n    z-index: 1; \n    color: white;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n}\n\n.footer-link:hover{\n    color: white;\n}\n\n.player1-div,\n.player2-div{\n    padding: 20px;\n    gap: 15px;\n}\n\n\n.player1-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid lightgreen;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n    /* text-align: center; */\n    /* color: white; */\n}\n\n.player2-div {\n    width: 100%;\n    height: 100%;\n    border: 2px solid lightgoldenrodyellow;\n    display: grid;\n    justify-items: center;\n    align-items: center;\n    /* text-align: center; */\n    /* color: white; */\n}\n\n\n.player1-grid,\n.player2-grid{\n\n    --height-and-width: max(330px, 30vw);\n    --border-size: 2px solid greenyellow;\n\n    border: var(--border-size);\n    width: var(--height-and-width);\n    height: var(--height-and-width);\n    display: grid;\n    grid-template-columns: repeat(10, 1fr);\n    color: white;\n\n}\n\n\n.player1-label,\n.player2-label{\n    color: white;\n    width: 100%;\n    border: 2px solid blanchedalmond;\n    text-align: center;\n    /* padding: 10px; */\n}\n\n\n.grid-column{\n    display: grid;\n    grid-template-rows: repeat(10, 1fr);\n    /* border: 2px solid turquoise; */\n    text-align: center;\n}\n\n.grid-row{\n\n    border: 2px solid turquoise;\n    \n}\n.grid-row:hover{\n    /* background-color: rgba(255, 255, 0, 0.156); */\n    border: 3px solid yellow;\n}\n\n.clicked {\n    background-color: red;\n}\n\n.ship-located {\n    background-color: darkorchid;\n}\n\n\n.ship-is-hit{\n    background-color: darkred;\n}\n\n.attack-missed{\n    background-color: white;\n}\n@media (max-width: 770px){\n    /* change player font position */\n\n    .player1-grid,\n    .player2-grid{\n        \n        /* Might have to reduce size further */\n        width: 280px;\n        height: 280px;\n\n    }\n    .player1-div{\n        order: 2;\n    }\n    .player2-div{\n        order: 1;\n    }\n\n    .player2-grid{\n        order: 2;\n    }\n\n    .player2-label{\n        order: 1;\n    }\n\n}"],sourceRoot:""}]);const d=a},314:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",i=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),i&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),i&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,i,r,o){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(i)for(var d=0;d<this.length;d++){var s=this[d][0];null!=s&&(a[s]=!0)}for(var A=0;A<n.length;A++){var l=[].concat(n[A]);i&&a[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),r&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=r):l[4]="".concat(r)),e.push(l))}},e}},354:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),o="/*# ".concat(r," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},72:n=>{var e=[];function t(n){for(var t=-1,i=0;i<e.length;i++)if(e[i].identifier===n){t=i;break}return t}function i(n,i){for(var o={},a=[],d=0;d<n.length;d++){var s=n[d],A=i.base?s[0]+i.base:s[0],l=o[A]||0,c="".concat(A," ").concat(l);o[A]=l+1;var p=t(c),u={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==p)e[p].references++,e[p].updater(u);else{var h=r(u,i);i.byIndex=d,e.splice(d,0,{identifier:c,updater:h,references:1})}a.push(c)}return a}function r(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,r){var o=i(n=n||[],r=r||{});return function(n){n=n||[];for(var a=0;a<o.length;a++){var d=t(o[a]);e[d].references--}for(var s=i(n,r),A=0;A<o.length;A++){var l=t(o[A]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=s}}},659:n=>{var e={};n.exports=function(n,t){var i=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}},540:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},56:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},825:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var i="";t.supports&&(i+="@supports (".concat(t.supports,") {")),t.media&&(i+="@media ".concat(t.media," {"));var r=void 0!==t.layer;r&&(i+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),i+=t.css,r&&(i+="}"),t.media&&(i+="}"),t.supports&&(i+="}");var o=t.sourceMap;o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},113:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return n[i](o,o.exports,t),o.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(72),e=t.n(n),i=t(825),r=t.n(i),o=t(659),a=t.n(o),d=t(56),s=t.n(d),A=t(540),l=t.n(A),c=t(113),p=t.n(c),u=t(254),h={};function g(n){document.querySelector(".header-div").textContent=n}function m(n,e,t){const i=function(){const n=i(),e=i(),t=[];function i(){const n=[];for(let e=0;e<10;e++){const t=[];t.length=10,n[e]=t}return n}return{ownGrid:n,placeShip:function(e,i,r){const o=function(n,e,t){let i=!0;const r=[];if(n.x<0||n.y<0||n.x>9||n.y>9)return i=!1,i;for(let o=0;o<t.getLength();o++){let t,a;"north"===e&&(t=n.x,a=n.y-o),"south"===e&&(t=n.x,a=n.y+o),"east"===e&&(t=n.x+o,a=n.y),"west"===e&&(t=n.x-o,a=n.y),(t<0||a<0||t>9||a>9)&&(i=!1),r.push([t,a])}return{validity:i,potentialCoordinates:r}}(e,i,r),a=o.potentialCoordinates;let d=o.validity,s="Placement_success";return d=function(n,e,t){if(!n)return n;for(let i=0;i<e.length;i++){const r=e[i];if(t[r[0]][r[1]]){n=!1;break}}return n}(d,a,n),d?(a.forEach((e=>{n[e[0]][e[1]]=r})),t.push(r),s):(s="Placement_failed",s)},receiveAttack:function(t,i){return"Miss"===e[t][i]?"Already Miss":n[t][i]?"Hit"===e[t][i]?"Already Hit":(n[t][i].hit(),e[t][i]="Hit","Hit"):(e[t][i]="Miss","Miss")},allSunk:function(){let n=!0;for(let e=0;e<t.length;e++)if(!t[e].isSunk()){n=!1;break}return n},hitMap:e}}();return"real"!==n&&"computer"!==n?"Invalid_input":{type:n,board:i}}function C(n){let e=0,t=!1;return{getLength:function(){return n},getHits:function(){return e},isSunk:function(){return e>=n&&(t=!0),t},hit:function(){e++}}}h.styleTagTransform=p(),h.setAttributes=s(),h.insert=a().bind(null,"head"),h.domAPI=r(),h.insertStyleElement=l(),e()(u.A,h),u.A&&u.A.locals&&u.A.locals;let f,y,I="computer";function v(n){I=n}function B(){f&&(f.deleteGrids(),f=null),y&&(y.deleteGrids(),y=null);const n=m("real"),e=m(I),t=C(5),i=C(4),r=C(3),o=C(3),a=C(2),d=[C(5),C(4),C(3),C(3),C(2)];function s(n,e){e.forEach((e=>{const t=n.board.placeShip({x:Math.floor(10*Math.random()),y:Math.floor(10*Math.random())},function(){const n=Math.floor(4*Math.random());if(n>3||n<0)throw"Choose Random Direction is not working correctly";return["north","south","east","west"][n]}(),e);if("Placement_failed"===t)return s(n,[e]);"Placement_success"!==t||console.log("All ships successfully placed")}))}s(n,[t,i,r,o,a]),s(e,d),f=function(n){const e=document.querySelector(".player1-grid");return{displayGrids:function(){E(n,e,"player1")},deleteGrids:function(){for(;e.firstChild;)e.firstChild.remove()},showShips:function(){k(0,n,e)},showHitMap:function(){L(n,e)},player1:n}}(n),y=function(n){const e=document.querySelector(".player2-grid");return{displayGrids:function(){E(n,e,"player2")},deleteGrids:function(){for(;e.firstChild;)e.firstChild.remove()},showShips:function(){k(0,n,e)},showHitMap:function(){L(n,e)},player2:n}}(e),f.displayGrids(),f.showShips(),y.displayGrids(),y.showHitMap()}const x=function(){let n="player1";function e(){const n=document.querySelector(".pass-device-message"),e=document.querySelector(".pass-device-button"),t=f.player1.board.allSunk();console.log(t);const i=y.player2.board.allSunk();return console.log(i),t?(n.textContent="Player 2 wins!",e.textContent="See board",g("Player 2 wins!"),!0):i?(n.textContent="Player 1 wins!",e.textContent="See board",g("Player 1 wins!"),!0):void 0}return{updateTurn:function(){return e()?(document.querySelector(".pass-device").classList.add("show-pass-device"),document.querySelector(".game-over").classList.add("enable-game-over"),f.deleteGrids(),f.displayGrids(),f.showShips(),f.showHitMap(),y.deleteGrids(),y.displayGrids(),y.showShips(),void y.showHitMap()):"player1"===n?(n="player2",f.deleteGrids(),f.displayGrids(),f.showHitMap(),y.deleteGrids(),y.displayGrids(),y.showShips(),y.showHitMap(),void("computer"===y.player2.type&&w(f.player1))):"player2"===n?(n="player1",y.deleteGrids(),y.displayGrids(),y.showHitMap(),f.deleteGrids(),f.displayGrids(),f.showShips(),f.showHitMap(),void("computer"===f.player1.type&&w(y.player2))):void 0},getTurn:function(){return n},isGameOver:e,resetTurn:function(){n="player1"}}}();let b=0;function w(n){console.log("Computer attacks");const e=Math.floor(10*Math.random()),t=Math.floor(10*Math.random()),i=n.board.receiveAttack(e,t);if("Already Hit"===i||"Already Miss"==i)return w(n);g(`Computer chose ${["A","B","C","D","E","F","G","H","I","J"][e]}${[10,9,8,7,6,5,4,3,2,1][t]} and it's a ${i.toLowerCase()}`),x.updateTurn(),b++,console.log("Computer attacks:"+b)}function E(n,e,t){for(let i=0;i<n.board.ownGrid.length;i++){n.board.ownGrid[i];const r=document.createElement("div");r.classList.add("grid-column"),e.append(r);for(let e=9;e>=0;e--){const o=document.createElement("div");o.classList.add("grid-row"),r.append(o),Y(n,o,i,e,t)}}}function k(n,e,t){{const n=t.childNodes;for(let t=0;t<e.board.ownGrid.length;t++){const i=e.board.ownGrid[t];let r=0;const o=n[t].childNodes;for(let n=9;n>=0;n--)i[n]&&o[r].classList.add("ship-located"),r++}}}function L(n,e){{const t=e.childNodes;for(let e=0;e<n.board.hitMap.length;e++){const i=n.board.hitMap[e];let r=0;const o=t[e].childNodes;for(let n=9;n>=0;n--){const e=i[n];"Hit"===e&&o[r].classList.add("ship-is-hit"),"Miss"===e&&o[r].classList.add("attack-missed"),r++}}}}function Y(n,e,t,i,r){e.addEventListener("click",(function(){const o=document.querySelector(".pass-device"),a=document.querySelector(".pass-device-message"),d=x.getTurn();if(r===d)return void g("Not your own board!");const s=t,A=i;if(console.log(s,A),console.log(n.board.hitMap[s][A]),"Miss"===n.board.hitMap[s][A]||"Hit"===n.board.hitMap[s][A])return void g("Grid already chosen");const l=n.board.receiveAttack(s,A),c=["A","B","C","D","E","F","G","H","I","J"],p=[10,9,8,7,6,5,4,3,2,1];if("player1"===d&&(a.textContent=`It's a ${l.toUpperCase()}! \r\n Pass the device to Player 2`,g(`Player 1 chose ${c[s]}${p[A]} and it's a ${l.toUpperCase()}`)),"player2"===d&&(a.textContent=`It's a ${l.toUpperCase()}! \r\n Pass the device to Player 1`,g(`Player 2 chose ${c[s]}${p[A]} and it's a ${l.toUpperCase()}`)),"real"===n.type&&o.classList.add("show-pass-device"),x.updateTurn(),n.board.ownGrid[s][A])return e.classList.add("ship-is-hit"),void console.log(n.board.ownGrid[s][A].getHits());e.classList.add("attack-missed")}))}!function(){const n=document.querySelector("body"),e=document.createElement("div");e.classList.add("start-menu"),e.classList.add("show-start-menu"),n.append(e);const t=document.createElement("div");t.classList.add("player-title-div"),e.append(t);const i=document.createElement("div");i.textContent="BATTLESHIP",i.classList.add("game-title"),t.append(i);const r=document.createElement("div");r.classList.add("player-type-title"),r.textContent="Play against: Computer",t.append(r);const o=document.createElement("div");o.classList.add("player-type-div"),e.append(o);const a=document.createElement("button");a.classList.add("computer-option"),a.textContent="Computer",o.append(a);const d=document.createElement("button");d.classList.add("real-player-option"),d.textContent="Your friend",o.append(d);const s=document.createElement("div");s.classList.add("start-button-div"),e.append(s);const A=document.createElement("button");A.textContent="START!",A.classList.add("start-button"),s.append(A);const l=document.createElement("div");l.classList.add("pass-device"),n.append(l);const c=document.createElement("div");c.classList.add("pass-device-message"),l.append(c);const p=document.createElement("button");p.classList.add("pass-device-button"),p.textContent="Start turn",l.append(p),p.addEventListener("click",(function(n){n.preventDefault(),l.classList.remove("show-pass-device")}));const u=document.createElement("div");u.classList.add("main-container"),n.append(u);const h=document.createElement("div");h.classList.add("top-div"),u.append(h);const g=document.createElement("div");g.classList.add("header-div"),g.textContent="Player 1 goes first",h.append(g);const m=document.createElement("button");m.classList.add("restart-button"),m.textContent="RESTART",h.append(m);const C=document.createElement("div");C.classList.add("player-div"),u.append(C);const f=document.createElement("div");f.classList.add("game-over"),C.append(f);const y=document.createElement("div");y.classList.add("footer-div"),u.append(y);const I=document.createElement("a");I.classList.add("footer-link"),I.setAttribute("href","https://github.com/Risshiganesh/battleship"),I.textContent="Made by Risshiganesh Villalan",y.append(I);const v=document.createElement("div");v.classList.add("player1-div"),C.append(v);const B=document.createElement("div");B.classList.add("player1-grid"),v.append(B);const x=document.createElement("div");x.classList.add("player1-label"),x.textContent="Player 1",v.append(x);const b=document.createElement("div");b.classList.add("player2-div"),C.append(b);const w=document.createElement("div");w.classList.add("player2-grid"),b.append(w);const E=document.createElement("div");E.classList.add("player2-label"),E.textContent="Player 2",b.append(E)}(),function(){const n=document.querySelector(".start-menu"),e=document.querySelector(".player-type-title"),t=document.querySelector(".start-button"),i=document.querySelector(".computer-option"),r=document.querySelector(".real-player-option"),o=document.querySelector(".restart-button");t.addEventListener("click",(function(e){e.preventDefault(),n.classList.remove("show-start-menu"),B()})),i.addEventListener("click",(function(n){n.preventDefault(),e.textContent="Play against: Computer",v("computer")})),r.addEventListener("click",(function(n){n.preventDefault(),e.textContent="Play against: Your Friend",v("real")})),o.addEventListener("click",(function(n){n.preventDefault(),x.resetTurn(),document.querySelector(".game-over").classList.remove("enable-game-over"),B()}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,